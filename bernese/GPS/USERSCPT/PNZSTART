package PNZSTART;
@ISA = ("RUNBPE");
# ============================================================================
#
# Name    :  PNZSTART
#
# Purpose :  Manage start up of the PositioNZ PCF
#
# Remark  :  PNZSTART manages automatically restarting a script to 
#            different locations based on the existence of files define
#            in the parameters..
#
#            Its behaviour is controlled by the existence of files generated
#            by the script.  Each file has an associated PID to which the 
#            script may jump.
#
#            Assumes that files are located in the OUT directory and have 
#            extension .LCK
#
#            This script may also use a lock file to prevent the script from
#            being restarted.  If the file exists then the script aborts the 
#            PCF.  Otherwise it is created and the PCF continues.  The lock file
#            only comes into effect if none of the jump files exist.  The intent
#            is that the script can only be restarted in well defined ways.
#
#            The first line of the file is structured as a one word status
#            and an optional date/time string.  The status is one of FAIL
#            SUCCEED, or WAIT.  The remainder of the script is the status
#            description.
#
#            The file status is set to FAIL when the script starts.  The 
#            script can be repeated at the end of the PCF
#            with the first parameter set to update the status.
#
# PARAMs  : 
#
#     (For starting the script)
#            Param1: NEXTJOB
#            Param2: Jump PID 1
#            Param3: Jump PID 2
#            Param4: Jump PID 3
#            Param5: Test file 1
#            Param6: Test file 2
#            Param7: Test file 3
#            Param8: PNZSTART lock file name
#
#     (For finishing the script)
#            Param1: FINISH
#            Param2: 
#            Param3:
#            Param4:
#            Param5: Test file 1
#            Param6: Test file 2
#            Param7: Test file 3
#            Param8: PNZSTART lock file name
#            ...
#
# ============================================================================
use strict;

use lib $ENV{BPE};
use bpe_util qw(prtMess prtErr prtGoto);
use LINZ::GNSS::Time qw/seconds_datetime/;


sub run 
{
    my $bpe = shift;
    my ($dirout)=$bpe->getKeys('DIR_OUT');
    my $lockext='.LCK';
    
    my $outname=$dirout;
    $outname=~ s/[\/\\]+$//;
    $outname=~ s/.*[\/\\]//;

    # Test for existence of "jump" files...

    my $finish=$bpe->{PARAM1} eq 'FINISH';
    my $lockfile='';

    foreach my $i (2,3,4)
    {
        my $fprm="PARAM".($i+3);
        my $jprm="PARAM$i";
        my $filename=$bpe->{$fprm};
        next if ! $filename;
        my $filepath=$dirout.$filename.$lockext;
        next if ! -e $filepath;
	
	if( $finish )
        {
            $lockfile=$filepath;
            last;
        }
        my $pid=$bpe->{$jprm};
        if( $pid =~ /^\d\d\d$/ )
        {
            prtMess($bpe,"Restarting at $pid as file $outname/$filename$lockext exists.");
            prtGoto($bpe,$pid);
            return;
        }
        die "Invalid PID $pid in PNZSTART parameter $jprm\n";
    }

    # No jump files exist - check whether restart is allowed.
    
    my $statusfile=$bpe->{PARAM8};
    if( ! $statusfile ) { return; }

    my $statuspath=$dirout.$statusfile.$lockext;

    my $runtime=seconds_datetime(localtime());

    if( ! $finish )
    {
        # If the stop file exists then stop!
        if( -e $statuspath )
        {
            prtErr($bpe,"Script not started as lock file $outname/$statusfile$lockext exists.");
            die "Script stopped by lock file $outname/$statusfile$lockext\n";
        }
        # Otherwise create a stop file to prevent restarting
        if( open(my $stf,">$statuspath") )
        {
            print $stf "FAIL $runtime\n";
            print $stf "BPE started but did not successfully finish\n";
            print $stf "Remove this file to allow the script to start again\n";
        }
    }
    else
    {
        if( ! -e $statuspath )
        {
            prtErr($bpe,"Script finish reached but file $outname/$statusfile$lockext does not exist.");
            die "Script stopped as lock file $outname/$statusfile$lockext does not exist\n";
        }
        if( open(my $stf,">$statuspath") )
        {
            if( $lockfile )
            {
                my $waittime=seconds_datetime((stat($lockfile))[9]);
                print $stf "WAIT $waittime\n";
                if( open(my $jf,$lockfile))
                {
                    while( my $line=<$jf> )
                    {
                        print $stf $line;
                    }
                    close($jf);
                }
            }
            else
            {
                print $stf "SUCCESS $runtime\n";
                print $stf "\nScript completed successfully\n";
            }
            close($stf);
        }
    }
}

