package PNZSUMRY;
@ISA = ("RUNBPE");
# ============================================================================
#
# Name    :  PNZSUMRY
#
# Purpose :  Summarize the information from a PositionzPP run
#
# PARAMs  :
#
# ============================================================================
use strict;

use lib $ENV{BPE};
use bpe_util qw(prtMess prtErr prtGoto);
use Time::Local;
use LINZ::BERN::CrdFile;
use LINZ::GNSS;
use LINZ::GNSS::Util;
use LINZ::GNSS::SinexFile;
use LINZ::GNSS::Time qw/seconds_decimal_yr/;

use JSON;

sub run 
{
    my $bpe = shift;
    my ($ssss,$dirout,$dircrd,$dirsnx)=$bpe->getKeys('$S+0','DIR_OUT','DIR_CRD','DIR_SNX');
    my $outname=$dirout;
    prtMess($bpe,"PositionzPP summary script run");
    eval
    {
        CreateSummary($dirout,$dircrd,$dirsnx,$ssss);
    };
    if( $@ )
    {
        my $msg=$@;
        prtErr($bpe,$msg);
    }
}

sub CreateSummary
{
    my( $dirout, $dircrd, $dirsnx,$ssss ) = @_;
    
    my $summfile="$dirout/SUMMARY.JSON";
    my $summary=GetSummary($dirout,$dircrd,$dirsnx,$ssss);
    my $js=new JSON;
    if( open(my $sf,">$summfile"))
    {
        print $sf $js->pretty->encode($summary);
        print $sf "\n";
        close $sf;
    }
}

sub GetSummary
{
    my( $dirout, $dircrd, $dirsnx, $ssss ) = @_;
    my $summary={};
    # Load the settings if they are available...
    if( -e "$dirout/SETTINGS.JSON" )
    {
        if( open(my $sf,"<$dirout/SETTINGS.JSON") )
        {
            eval
            {
                my $sdata=join('',<$sf>);
                close($sf);
                $summary=JSON->new->decode($sdata);
            };
            close($sf);
        }
    }
    GetOrbitType($summary,$dirout);
    GetRef($summary,$dirout,$dircrd,$ssss);
    my $refstns=$summary->{refstns};
    # GetFinalCoords($summary,$dirout,$dircrd,$ssss);
    GetSinexCoords($summary,$dirsnx,$ssss);
    GetFinalStats($summary,$dirout,$dircrd,$ssss);
    GetHelmert($summary,$refstns,$dirout,$dircrd,$ssss);
    GetBaselineWkt($summary);
    return $summary;
}

sub TimeSeconds
{
    my ($time) = @_;
    return 0 if ! $time || $time !~ /^\s*(\d\d\d\d)\-(\d\d)\-(\d\d)\s+(\d\d)\:(\d\d)\:(\d\d)\s*$/;
    return timegm($6,$5,$4,$3,$2-1,$1-1900);
}

sub GetOrbitType
{
    my ($self,$dirout) = @_;
    my $orbfile="$dirout/GETORB.OUT";
    my $orbtype='UNKNOWN';
    if(open(my $of, $orbfile ))
    {
        while( my $line=<$of> )
        {
            if( $line=~/^\s*File\s+type\:\s+ORB\s+subtype\:\s+(\S+)\s*$/i )
            {
                $orbtype=$1;
                last;
            }
        }
        close($of);
    }
    substr($orbtype,1)=lc(substr($orbtype,1));
    $self->{orbittype}=$orbtype;
}

sub GetRef
{
    my ($self,$dirout,$dircd,$ssss) = @_;
    my $rffile="$dirout/GETREF.OUT";
    my $refstns={};
    my $start;
    my $end;
    my $rfcodes='';
    my $minoffset='';
    my $maxoffset='';
    my $nrefstn=0;
    if( open( my $rf, $rffile ) )
    {
        my $stn;
        while( my $line=<$rf> )
        {
            $line=~ s/\s*$//;
            $start=$' if $line =~ /Session\s+start\:\s+/;
            $end=$' if $line =~ /Session\s+end\:\s+/;
            if( $line=~/Adding\s+reference\s+station\s+(.*?)\:/ )
            {
                my $name=$1;
                $stn={name=>$name};
                $refstns->{$name}=$stn;
                $rfcodes .= ' '.$name;
                $nrefstn++;
                next;
            }
            if( $stn && $line=~/Calculated\s+ITRF2008\s+coordinate\s+as\s+\[(.*)\]/)
            {
                my @crds=split(' ',$1);
                $stn->{xyz}=[$crds[0]+0.0,$crds[1]+0.0,$crds[2]+0.0];
                next;
            }
            if( $stn && $line=~ /Offset\s+(\d+\.\d+)km/ )
            {
                my $offset=$1+0;
                $stn->{offset}=$offset;
                $minoffset=$offset if $minoffset eq '' || $offset < $minoffset;
                $maxoffset=$offset if $maxoffset eq '' || $offset > $maxoffset;
            }
       }
        my $starttime=<$rf>;
        my $endtime=<$rf>;
    }

    $self->{refstns}=$refstns;
    $self->{refstn_summary}={
        count=>$nrefstn,
        marknames=>join(' ',
            sort {$refstns->{$a}->{offset} <=> $refstns->{$b}->{offset}}
            keys %$refstns),
        minoffset=>$minoffset,
        maxoffset=>$maxoffset
    };

    my $duration=TimeSeconds($end)-TimeSeconds($start);
    $self->{session}=
    { 
        start=>$start,
        end=>$end,
        duration=>$duration
    };
    return;
}

sub GetFinalStats
{
    my ($self,$dirout,$dircd,$ssss) = @_;
    my $fsfile="$dirout/AFS$ssss.OUT";
    my $final={};
    if( open( my $fsf, $fsfile ) )
    {
        while(my $line=<$fsf>)
        {
            $final->{dof}=$1+0 if $line=~/^\s*DEGREE\s+OF\s+FREEDOM\s+\(DOF\)\s*\:\s*(\d+)/;
            $final->{seuw}=$1+0 if $line=~/^\s*CHI\*\*2\/DOF\s*\:\s*(\d+\.\d+)/;
        }
        close($fsf);
    }
    $self->{final}=$final;
}

sub GetHelmert
{
    my ($self,$refstns,$dirout,$dircd,$ssss) = @_;
    my $hmfile="$dirout/HLM$ssss.OUT";
    my $helmert={};
    my $ncrd=0;
    my $sum=[0.0,0.0,0.0];
    if( open( my $hmf, $hmfile ) )
    {
        while( my $line=<$hmf> )
        {
            last if $line=~/RESIDUALS\s+IN\s+LOCAL\s+SYSTEM\s+\(/;
        }
        while( my $line=<$hmf> )
        {
            next if $line !~ /^\s*\|\s*\d+\s*\|\s*([\w\s]+?)\s*\|\s*(\w)\s*\w\s*\|([\-\s\d\.]+)\|/;
            my ($name,$flag,$crds)=($1,$2,$3);
	    next if ! exists $refstns->{$name};
            my ($n,$e,$u)=split(' ',$crds);
            $ncrd++;
            $sum->[0] += $e;
            $sum->[1] += $n;
            $sum->[2] += $u;
            $helmert->{$name}={name=>$name,flag=>$flag,residual_enu=>[$e+0.0,$n+0.0,$u+0.0]};
        }
        close($hmf);
    }
    my $maxres=[0.0,0.0,0.0];
    if( $ncrd )
    {
        $sum->[0] /= $ncrd;
        $sum->[1] /= $ncrd;
        $sum->[2] /= $ncrd;
        foreach my $v (values %$helmert)
        {
            my $renu=$v->{residual_enu};
            foreach my $i (0,1,2)
            {
                my $rv=$renu->[$i]-$sum->[$i];
                $renu->[$i]=$rv;
                $rv=abs($rv);
                $maxres->[$i]=$rv if $rv > $maxres->[$i];
            }
        }
    }
    $self->{helmert} = $helmert;
    $self->{ref_stn_residual_enu}=$maxres;
}

sub GetFinalCoords
{
    my ($self,$dirout,$dircrd,$ssss) = @_;
    my $fcdfile="$dircrd/FIN$ssss.CRD";
    my $crds={};
    eval
    {
        my $cf=new LINZ::BERN::CrdFile($fcdfile);
        foreach my $s ($cf->stations)
        {
            my $stn={
                name=>$s->name,
                xyz=>$s->xyz,
                flag=>$s->flag
            };
            $crds->{$s->name}=$stn;
        }
    };
    $self->{final_coords}=$crds;
}

sub _wrapLon { return $_[0] < 0 ? $_[0]+360.0 : $_[0]; }

sub GetSinexCoords
{
    my ($self,$dirsnx,$ssss)=@_;
    my $snxfile="$dirsnx/FIN$ssss.SNX";
    my $sfdata={};
    eval
    {
        my $cslist=LINZ::GNSS::CoordSysList();
        my $itrf08xyz;
        my $nzgd2k;
        eval
        {
            $itrf08xyz=$cslist->coordsys('ITRF2008_XYZ');
            $nzgd2k=$cslist->coordsys('NZGD2000');
        };
        if( $@ )
        {
            print $@;
        }

        my $sf=new LINZ::GNSS::SinexFile($snxfile);
        my %codelist=();

        foreach my $stn ($sf->stations)
        {
            # Assume just one solution for code..
            my $code=$stn->{code};
            croak("SINEX file contains more than one solution for station $code\n")
                if exists $codelist{$code};
            $codelist{$code}=1;
               
            my $xyz=$stn->{xyz};
            my $covxyz=$stn->{covar};
            my ($llh,$covllh)=LINZ::GNSS::Util::ConvertXYZToLLH($xyz,$covxyz);
            my $year=seconds_decimal_yr($stn->{epoch});
            my $crdnz2k;
            eval
            {
                my $crd=$itrf08xyz->coord(@$xyz);
                $crd->setepoch($year);
                $crdnz2k=$crd->as($nzgd2k);
            };
            if( $@ )
            {
                print $@;
            }
            $sfdata->{$code}={
                code=>$code,
                xyz=>$xyz,
                covxyz=>$covxyz,
                llh=>[_wrapLon($llh->lon),$llh->lat,$llh->hgt],
                covenu=>$covllh,
                nzgd2kllh=>$crdnz2k ? [_wrapLon($crdnz2k->lon),$crdnz2k->lat,$crdnz2k->hgt] : [0.0,0.0,0.0],
                year=>$year,
            };
        }
    };
    if( $@ )
    {
        print $@;
    }
    $self->{calc_coords} = $sfdata;
}

sub GetBaselineWkt
{
    my ($self)=@_;
    $self->{baseline_wkt}='';
    eval
    {
        my $cslist=LINZ::GNSS::CoordSysList();
        my $itrf08xyz=$cslist->coordsys('ITRF2008_XYZ');
        my $itrf08=$cslist->coordsys('ITRF2008');
        my $markname=$self->{files}->[0]->{markname};
        my $llh=$self->{calc_coords}->{$markname}->{llh};
        my @lines=();
        foreach my $rfs (values %{$self->{refstns}})
        {
            my $rfllh=$itrf08xyz->coord(@{$rfs->{xyz}})->as($itrf08);
            push(@lines,sprintf("(%.8f %.8f, %.8f %.8f)",
                    $llh->[0],$llh->[1],_wrapLon($rfllh->lon),$rfllh->lat));
        }
        $self->{baseline_wkt}='MULTILINESTRING('.
           join(',',@lines).')';
    };
    if( $@ )
    {
        print $@;
    }
}

1;

