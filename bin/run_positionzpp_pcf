#!/usr/bin/perl

=head1 run_positionz_pcf

Script to run the PositioNZ-PP PCF on a selected RINEX file.  The script will create
a Bernese campaign PNZPP# where # is the next number in a sequence, then run the 
PositioNZ PCF with that campaign.

Usage:  run_positionz_pcf [options] <rinex_file_name>

Options can include

=over

=item -c <camp>

Specifies an alternative name for the campaign

=item -o

Allows overwriting an existing campaign (if the new campaign name does not contain a 
numeric wildcard (#) character.

=back

=cut

use strict;
use LINZ::BERN::BernUtil;
use LINZ::GNSS::DataCenter;
use LINZ::GNSS::Time qw /seconds_datetime/;
use JSON;
use Getopt::Std;

my %opts;
getopts('oc:s:a:S',\%opts);

my $campaign = $opts{c} || 'PNZPP#';
my $overwrite = $opts{o};

@ARGV == 1 || die <<EOS;

Syntax: run_positionz_pcf [options] rinex_file

Runs the PositioNZ-PP PCF on a specified RINEX file.  Creates a new user campaign
called PNZPP###, installs the rinex file, and runs the PCF.

Options can include:
 
  -c ###    Specify an alternative name for the campaign
  -o        Allow overwriting an existing campaign directory
  -s fff    Append job statistics to fff.csv and fff_fail.csv
  -a x=y    Add column x with value y to the csv file (column header only
            added if the file does not yet exists)
  -S        Collect statistics from all campaigns matching the name, don't
            run Bernese.

EOS

my $rinexfile=shift(@ARGV);
my $pcf='RUN_PNZ';

eval
{
    LINZ::BERN::BernUtil::SetBerneseEnv();
    my $codes=LINZ::GNSS::DataCenter::AvailableStations();
    my $campaign=LINZ::BERN::BernUtil::CreateCampaign(
        $campaign,
        RinexFiles=>[$rinexfile],
        RenameRinex=>'U###',
        RenameCodes=>$codes,
        CrdFile=>'APR$S+0',
        AbbFile=>'ABBREV',
        StaFile=>'STATIONS',
        AddNoneRadome=>1,
        MakeSessionFile=>1,
        SettingsFile=>1,
        SetupUserMenu=>1,
        UpdateCampaignList=>1,
        CanOverwrite=>$opts{o},
    );
    if( $campaign )
    {
        foreach my $k (sort keys %$campaign )
        {
            print "$k: $campaign->{$k}\n" if ! ref $campaign->{$k};
        }

        # Some variables required by the RUN_PNZ PCF script
        my $usrmrk=$campaign->{marks}->[0];
        my $vars=$campaign->{variables};
        $vars->{V_USRMRK}=$campaign->{marks}->[0];
        $vars->{V_ORBTYPE}='ULTRA+';
        $vars->{V_ERPTYPE}='ULTRA+';
        $vars->{V_GDDNLD}='1';
        $vars->{V_GDQUEU}='0';

        my $status=LINZ::BERN::BernUtil::RunPcf($campaign,$pcf);
        if( $status )
        {
            print "BPE stopped with errors\n";
        }
        else
        {
            print "BPE completed successfully\n";
        }
    }
};
if( $@ )
{
    print "Unable to create job:\n$@\n";
}

sub GetJobStats
{
    my($campaigndir,$csvfile)=@_;
    my $stats={};
    my $campaign=$campaigndir;
    $campaign=~s/.*[\\\/]//;
    my $runstatus=BernUtil::RunPcfStatus($campaigndir);
    eval
    {
        my $setfile=$campaigndir.'/OUT/SETTINGS.JSON';
        open(my $setf,$setfile) || die "Cannot open settings file $setfile\n";
        my $setdata=join('',<$setf>);
        close($setf);
        $settings=JSON::new->decode($setdata);
        scalar(@{$settings->{files}})==1 || die "Campaign $campaign has multiple input files\n";
        my $f0=$settings->{files}->[0];
        my $markname=$f0->{markname};
        $stats->{markname}=$markname;
        $stats->{srcmarkname}=$f0->{srcmarkname};
        $stats->{srcfilename}=$f0->{srcfilename};
        $stats->{start}=seconds_datetime($f0->{session_start});
        $stats->{duration}=int($f0->{session_end}-$f0->{session_end});
        $stats->{campaign}=$campaign;
        my $rsltfile=$campaigndir.'/OUT/SUMMARY.JSON';
        if( open(my $rf,"<$rsltfile") )
        {
            my $rsltdata=join('',<$rf>);
            close($rf);
            my $results=JSON::new->decode($rsltdata);
            $stats->{orbit_type}=$results->{orbittype};
            my $calc=$results->{calc_coords}->{$markname};
            $stats->{lon}=sprintf("%.9f",$calc->{nzgd2kllh}->[0]);
            $stats->{lat}=sprintf("%.9f",$calc->{nzgd2kllh}->[1]);
            $stats->{ehgt}=sprintf("%.4f",$calc->{nzgd2kllh}->[2]);
            my $covenu=$calc->{covenu};
            $stats->{covee}=sprintf("%.1f",sqrt($covenu->[1]->[1])*1000);
            $stats->{covnn}=sprintf("%.1f",sqrt($covenu->[0]->[0])*1000);
            $stats->{covuu}=sprintf("%.1f",sqrt($covenu->[2]->[2])*1000);
            my $rsr=$results->{ref_stn_residual_enu};
            $stats->{refstnde}=sprintf("%.1f",$rsr->[0]);
            $stats->{refstnde}=sprintf("%.1f",$rsr->[0]);
            $stats->{refstnde}=sprintf("%.1f",$rsr->[0]);
            $stats->{seu}=$results->{final}->{seu};
        }
    }
}

* campaign.files
+ results.calc_coords{ markname}
|$+,$+,$+,$+,$+,$+,$+,$+,#.###,#.###,#.###,#.###,#.###,#.###,#.##
= campaign.JOBID
= srcfilename
= srcmarkname
= seconds_datetime( campaign.session_start) seconds_datetime( campaign.session_end)
= orbit_type
= seconds_datetime( start_time) seconds_datetime( end_time) 
= sqrt( covenu[1][1])*1000  sqrt( covenu[0][0])*1000 sqrt( covenu[2][2])*1000
= results.ref_stn_residual_enu[0] results.ref_stn_residual_enu[1] results.ref_stn_residual_enu[2]
= results.final.seu
}

