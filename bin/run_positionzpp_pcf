#!/usr/bin/perl

=head1 run_positionz_pcf

Script to run the PositioNZ-PP PCF on a selected RINEX file.  The script will create
a Bernese campaign PNZPP# where # is the next number in a sequence, then run the 
PositioNZ PCF with that campaign.

Usage:  run_positionz_pcf [options] <rinex_file_name>

Options can include

=over

=item -c <camp>

Specifies an alternative name for the campaign. 

=item -o

Allows overwriting an existing campaign (if the new campaign name does not contain a 
numeric wildcard (#) character.

=item -O <type>

Specifies the orbit quality to use, eg FINAL, RAPID, ULTRA, etc.

=item -w

Create the job(s) but don't run it

=item -j

Delete the campaign after it has run

=item -p <pcf>

Use an alternative Bernese PCF (process control file) for the run.  The default is RUN_PNZ.

=item -s <csvfile>

Specifies a CSV file to which statistics about the job are written.  The statistics will be a
appended to the job.

=item -a <x=y>

Adds a column x with value y to the CSV file

=item -S

Just compile statistics from existing jobs, don't create or run any new jobs

=back

=cut

use strict;
use LINZ::BERN::BernUtil;
use LINZ::GNSS;
use LINZ::GNSS::DataCenter;
use LINZ::GNSS::Time qw /seconds_datetime/;
use File::Path qw/remove_tree/;
use JSON;
use Getopt::Std;

my %opts;
getopts('oO:c:wjs:a:p:S',\%opts);

my $campaign = uc($opts{c}) || 'PNZPP#';
my $overwrite = $opts{o};
my $orbittype = $opts{O} || 'ULTRA+';
my $extradata=$opts{a};
my $statscsv=$opts{s};
my $statsonly=$opts{S};
my $norun=$opts{w};
my $junkdir=$opts{j};
my $pcf= $opts{p} || 'RUN_PNZ';

my @stats_columns=qw/
   id
   markname
   orig_markname
   filename
   orig_filename
   sessionstart
   duration
   lon
   lat
   ehgt
   erre
   errn
   erru
   refcount
   refcodes
   refminoffset
   refmaxoffset
   refmaxde
   refmaxdn
   refmaxdu
   orbittype
   seuw
   baseline_wkt
   /;

my @fail_columns=qw/
   id
   markname
   orig_markname
   filename
   orig_filename
   sessionstart
   duration
   status
   fail_pid
   fail_script
   fail_prog
   fail_message
   /;

@ARGV || $statsonly || die <<EOS;

Syntax: run_positionz_pcf [options] rinex_file

Runs the PositioNZ-PP PCF on a specified RINEX file.  Creates a new user campaign
called PNZPP###, installs the rinex file, and runs the PCF.

Options can include:
 
  -c ###    Specify an alternative name for the campaign
  -O ####   Specify orbit/ERP quality, one of ULTRA, RAPID, FINAL.
  -o        Allow overwriting an existing campaign directory
  -w        Create the campaign but don't run the script (wait)
  -j        Delete the campaign after it has run
  -p ###    Specify an alternative Bernese PCF to use
  -s fff    Append job statistics to fff.csv and fff_fail.csv
  -a x=y    Add column x with value y to the csv file (column header only
            added if the file does not yet exists)
  -S        Collect statistics from all campaigns matching the name, don't
            create or run any campaigns

EOS

LINZ::BERN::BernUtil::SetBerneseEnv();
LINZ::GNSS::LoadConfig();

if( $statsonly )
{
    die "Cannot use -S option without csv file (-s option)\n" if ! $statscsv;
    my $campdir=$ENV{P};
    die "Invalid campaign directory $campdir\n" if ! -e $campdir;
    my $campre=quotemeta($campaign);
    $campre=~ s/(\\\#)+/\\d+/;
    $campre='^'.$campre.'$';
    opendir(my $cd,$campdir) || die "Cannot read directory $campdir\n";
    my @dirs=();
    foreach my $d (readdir($cd))
    {
        next if $d !~ /$campre/;
        $d = "$campdir/$d";
        next if ! -d  "$d/OUT";
        push(@dirs,$d);
    }
    closedir($cd);
    foreach my $d (@dirs)
    {
        my $dirname=$d;
        $dirname=~s/.*[\\\/]//;
        print "Writing statistics for $dirname\n";
        PrintJobStats($d,$statscsv,$extradata);
    }
    exit;
}

my $spacer='';
$orbittype=uc($orbittype);
die "Invalid orbit type $orbittype\nMust be one of ULTRA, ULTRA+, RAPID, RAPID+, FINAL\n"
   if $orbittype !~ /^(ULTRA\+?|RAPID\+?|FINAL)$/;
foreach my $rinexfile (@ARGV)
{
    print $spacer;
    $spacer="\n\n".("="x70)."\n";
    print "Processing $rinexfile\n";
    if( ! -e $rinexfile )
    {
        print "Cannot find rinex file $rinexfile\n";
        next;
    }
    my $berncamp=RunPcf($campaign,$rinexfile,$norun);
    my $campdir=$ENV{P}.'/'.$berncamp->{JOBID};
    PrintJobStats($campdir,$statscsv,$extradata) if $statscsv;
    remove_tree($campdir) if $junkdir;
}

sub RunPcf
{
    my($campname,$rinexfile,$norun)=@_;
    my $campaign;
    eval
    {
        my $codes=LINZ::GNSS::DataCenter::AvailableStations();
        $campaign=LINZ::BERN::BernUtil::CreateCampaign(
            $campname,
            RinexFiles=>[$rinexfile],
            RenameRinex=>'',
            RenameCodes=>$codes,
            CrdFile=>'APR$S+0',
            AbbFile=>'ABBREV',
            StaFile=>'STATIONS',
            FixRinexAntRec=>1,
            MakeSessionFile=>1,
            SettingsFile=>1,
            SetupUserMenu=>1,
            UpdateCampaignList=>1,
            CanOverwrite=>$opts{o},
        );
        if( $campaign && ! $norun )
        {
            foreach my $k (sort keys %$campaign )
            {
                print "$k: $campaign->{$k}\n" if ! ref $campaign->{$k};
            }

            # Some variables required by the RUN_PNZ PCF script
            my $usrmrk=$campaign->{marks}->[0];
            my $vars=$campaign->{variables};
            $vars->{V_USRMRK}=$campaign->{marks}->[0];
            $vars->{V_ORBTYP}=$orbittype;
            $vars->{V_GDDNLD}='1';
            $vars->{V_GDQUEU}='0';

            my $status=LINZ::BERN::BernUtil::RunPcf($campaign,$pcf);
            if( $status )
            {
                print "BPE stopped with errors\n";
                print "PID: ".$campaign->{runstatus}->{fail_pid}."\n";
                print "Script: ".$campaign->{runstatus}->{fail_script}."\n";
                print "Program: ".$campaign->{runstatus}->{fail_prog}."\n";
                print "Message: ".$campaign->{runstatus}->{fail_message}."\n";
            }
            else
            {
                print "BPE completed successfully\n";
            }
        }
        elsif( $campaign )
        {
            print "Campaign created in: ".$campaign->{campaigndir}."\n";
        }
    };
    if( $@ )
    {
        print "Unable to create job:\n$@\n";
    }
    return $campaign;
}

sub PrintJobStats
{
    my($campaigndir,$csvfile,$extracols)=@_;
    my $campaign=$campaigndir;
    $campaign=~s/.*[\\\/]//;
    $csvfile=~s/\.csv$//i;

    my $runstatus=LINZ::BERN::BernUtil::RunPcfStatus($campaigndir);
    my $stats={};
    eval
    {
        my $setfile=$campaigndir.'/OUT/SETTINGS.JSON';
        open(my $setf,$setfile) || die "Cannot open settings file $setfile\n";
        my $setdata=join('',<$setf>);
        close($setf);
        my $settings=JSON->new->decode($setdata);
        scalar(@{$settings->{files}})==1 || die "Campaign $campaign has multiple input files\n";
        my $f0=$settings->{files}->[0];
        my $markname=$f0->{markname};
        $stats->{markname}=$markname;
        $stats->{orig_markname}=$f0->{orig_markname};
        $stats->{filename}=$f0->{filename};
        $stats->{orig_filename}=$f0->{orig_filename};
        $stats->{sessionstart}=seconds_datetime($settings->{session_start});
        $stats->{duration}=int($settings->{session_end}-$settings->{session_start});
        $stats->{id}=$campaign;
        my $rsltfile=$campaigndir.'/OUT/SUMMARY.JSON';
        if( open(my $rf,"<$rsltfile") )
        {
            my $rsltdata=join('',<$rf>);
            close($rf);
            my $results=JSON->new->decode($rsltdata);
            $stats->{orbittype}=$results->{orbittype};
            my $calc=$results->{calc_coords}->{$markname};
            $stats->{lon}=sprintf("%.9f",$calc->{nzgd2kllh}->[0]);
            $stats->{lat}=sprintf("%.9f",$calc->{nzgd2kllh}->[1]);
            $stats->{ehgt}=sprintf("%.4f",$calc->{nzgd2kllh}->[2]);
            my $covenu=$calc->{covenu};
            $stats->{erre}=sprintf("%.1f",sqrt($covenu->[1]->[1])*1000);
            $stats->{errn}=sprintf("%.1f",sqrt($covenu->[0]->[0])*1000);
            $stats->{erru}=sprintf("%.1f",sqrt($covenu->[2]->[2])*1000);
            my $rsr=$results->{ref_stn_residual_enu};
            $stats->{refmaxde}=sprintf("%.1f",$rsr->[0]);
            $stats->{refmaxdn}=sprintf("%.1f",$rsr->[1]);
            $stats->{refmaxdu}=sprintf("%.1f",$rsr->[2]);
            $stats->{seuw}=$results->{final}->{seuw};
            $stats->{baseline_wkt}=$results->{baseline_wkt};
            my $rfs=$results->{refstn_summary};
            $stats->{refcount}=$rfs->{count};
            $stats->{refminoffset}=$rfs->{minoffset};
            $stats->{refmaxoffset}=$rfs->{maxoffset};
            $stats->{refcodes}=$rfs->{marknames};
        }
        my @csvcols=@stats_columns;
        foreach my $col (split(/\:/,$extracols))
        {
            my($name,$value)=split(/\=/,$col,2);
            splice(@csvcols,-1,0,$name);
            $stats->{$name}=$value;
        }
        my $csvfn=$csvfile.'.csv';
        my $newfile= ! -e $csvfn;
        open(my $csvf,">>$csvfn") || die "Cannot open CSV file $csvfn\n";
        print $csvf join(",",@csvcols),"\n" if $newfile;
        print $csvf join(",", 
            map { s/\"/\"\"/g; /[\,\n\"]/ ? '"'.$_.'"' : $_ }
            map { $stats->{$_} }
            @csvcols),"\n";
        close($csvf);
    };
    if( $@ )
    {
        print "Error assembling statistics\n$@\n";
    }
    if( $runstatus->{status} ne 'OK' )
    {
        $stats->{$_}=$runstatus->{$_} foreach keys %$runstatus;
        my @csvcols=@fail_columns;
        eval {
            my $csvfn=$csvfile.'_fail.csv';
            my $newfile= ! -e $csvfn;
            open(my $csvf,">>$csvfn") || die "Cannot open CSV file $csvfn\n";
            print $csvf join(",",@csvcols),"\n" if $newfile;
            print $csvf join(",", 
                map { s/\"/\"\"/g; /[\,\n\"]/ ? '"'.$_.'"' : $_ }
                map { $stats->{$_} }
                @csvcols),"\n";
            close($csvf);
        };
        if( $@ )
        {
            print "Error assembling fail statistics\n$@\n";
        }
    }
}
