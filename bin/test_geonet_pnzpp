#!/usr/bin/perl

use strict;
use warnings;
use Time::Local;
use Net::FTP;
use LINZ::BERN::BernUtil;
use LINZ::GNSS;
use LINZ::GNSS::FileCache;

use Getopt::Std;

my %opts;
getopts('o:p:r:s:c:x:t:d:vh',\%opts);

help(!$opts{h}) if $opts{h} || ! @ARGV;

die "Incorrect number of parameters\n" if scalar(@ARGV) != 5;
my($code,$year,$doy,$sess_len,$ntests)=@ARGV;

my $orb = uc($opts{o} // '') || 'FINAL';
my $pcf = uc($opts{p} // '') || 'RUN_PNZ';
my $camp = uc($opts{c} // '') || 'TEST_PNZ';
my $nskip = ($opts{x} // '') || 0;
my $offsets = ($opts{t} // '') || '0:00';
my $rnxdir = ($opts{d} // '.');

my $csv = $opts{s} || 'test_pnz';
my $verbose = $opts{v};

$code =~ /^\w{4}(\+\w{4})*$/ || die "Invalid code $code - must be four letters\n";
$code = uc($code);
$year =~ /^(?:19|20)(\d\d)(\+((19|20)\d\d))*$/ || die "Invalid year $year\n";
$doy =~ /^[0123]\d\d(\+[0123]\d\d)*$/ || die "Invalid doy $doy\n";
$sess_len =~ /^(\d\d?)(?:\:(\d\d))?(\+\d\d?(\:\d\d)?)*$/ || die "Invalid session length $sess_len\n";
$ntests =~ /^\d\d?\d?$/ || die "Invalid number of tests $ntests\n";
$nskip =~ /^\d\d?\d?$/ || die "Invalid number of tests to skip $nskip\n";
$orb =~ /^(ULTRA|RAPID|FINAL)(\+(ULTRA|RAPID|FINAL))*$/ || die "Invalid orbit $orb, must be ULTRA, RAPID, or FINAL\n";
$pcf =~ /^\w{3,8}(\+\w{3,8})*$/ || die "Invalid pcf name, must be 3-8 characters\n";
$camp =~ /^[\w\#]{1,8}$/ || die "Invalid campaign name, must be 1-8 characters\n";
$offsets =~ /^(\d?\d)(?:\:(\d\d))$/ || die "Invalid time offset $offsets\n";
my $offset_secs=($1*60+$2)*60;
-d $rnxdir || die "Invalid rinex directory $rnxdir\n";

# Set up environment variables used by get data, then load the configuration
LINZ::BERN::BernUtil::SetBerneseEnv();
LINZ::GNSS::LoadConfig();

if( $verbose )
{
    print "Code: $code\n";
    print "Year: $year\n";
    print "DOY:  $doy\n";
    print "Sess_length: $sess_len\n";
    print "no of tests: $ntests\n";
    print "skipping first: $nskip\n" if $nskip;
    print "orbit: $orb\n";
    print "pcf name: $pcf\n";
    print "campaign name: $camp\n";
    print "rinex directory: $rnxdir\n" if $rnxdir;
}

my @fileprms=();
foreach my $code1 (split(/\+/,$code))
{
    foreach my $year1 (split(/\+/,$year))
    {
        foreach my $doy1 (split(/\+/,$doy))
        {
            foreach my $sess1 (split(/\+/,$sess_len))
            {
                push(@fileprms,{code=>$code1, year=>$year1, doy=>$doy1, sess_len=>$sess1});
            }
        }
    }
}

my @procprms=();
foreach my $pcf1 (split(/\+/,$pcf))
{
    foreach my $orb1 (split(/\+/,$orb))
    {
        push(@procprms,{pcf=>$pcf1,orb=>$orb1})
    }
}

my $nskip0=$nskip;

# Calculate timestamp for start of session (1 Jan + doy*secs_per_day)

foreach my $fileprm (@fileprms)
{
    my $code=$fileprm->{code};
    my $year=$fileprm->{year};
    my $doy=$fileprm->{doy};
    my $sess_len=$fileprm->{sess_len};
    $nskip=$nskip0;

    $sess_len =~ /^(\d\d?)(?:\:(\d\d))?$/;
    my $sess_secs = 60*($1*60 + ($2 // 0));

    my $yy = substr($year,2);

    my $sess0_start=timegm(0,0,0,1,0,$year-1900)+($doy-1)*(60*60*24);

    foreach my $testno (1 .. $ntests)
    {
        print "="x60,"\n";
        # Beginning and end of test session in seconds
        my $teststart=$sess0_start + ($testno-1)*$sess_secs+$offset_secs;
        my $testend=$teststart+$sess_secs-1;
        my ($year,$mon,$day,$hour,$min,$sec,$doy)=(gmtime($teststart))[5,4,3,2,1,0,7];
        my ($yend,$dend)=(gmtime($testend))[5,7];
        if( $year != $yend )
        {
            print "Skipping session $testno - start and end years differ\n";
            next;
        }
        next if $nskip && $nskip--;
        $year += 1900;
        $mon++;
        $doy++;
        $dend++;
        my @rnx=getFiles($rnxdir,$code,$year,$doy,$dend,$verbose);

        # Construct teqc command to extract requires session.
        # Start time
        # Number of minutes
        # Output file name
        my $tstart=sprintf("%04d-%02d-%02d-%02d:%02d:%02d",$year,$mon,$day,$hour,$min,$sec);
        my $tlen=$sess_secs/60-0.1;
        my $tsuffix=$rnx[0];
        $tsuffix=~ s/.*\.//;
        my $tname=$rnxdir.'/'.sprintf("%s_%03d.%s",$code,$testno,$tsuffix);
        system('teqc','+st',$tstart,'-dm',$tlen,'+out',$tname,@rnx);
        print "Session $testno RINEX file: $tname\n";
        foreach my $procprm (@procprms)
        {
            $pcf=$procprm->{pcf};
            $orb=$procprm->{orb};
            my $extradata="pcf=$pcf:orb=$orb";
            system('run_positionzpp_pcf','-c',$camp,'-o','-O',$orb,'-p',$pcf,'-s',$csv,'-a',$extradata,$tname);
        }
    }
}

sub getFiles
{
    my($rnxdir, $code,$year,$dstart,$dend,$verbose) = @_;

    my $cache=LINZ::GNSS::FileCache::Cache();
    my $request=sprintf("OBS:DAILY %04d:%03d-%03d %s",$year,$dstart,$dend,$code);
    my ($status,$when,$files)=$cache->getData($request,$rnxdir,queue=>0);

    die "Cannot download RINEX files ($request)\n" if ! @$files;

    my @rnxfiles = map {$_->filepath} @$files;

    return @rnxfiles;
}

sub help
{
    my ($brief)=@_;
    require Pod::Usage;
    Pod::Usage::pod2usage(
    {
        -verbose=>$brief ? 99 : 2,
        -sections=>'Synopsis',
        -exitval=>2,
    });
}

__DATA__

=head1

test_geonet_pnzpp: Test PositioNZ-PP PCF using downloaded GNS RINEX data

=head1 Synopsis

 test_geonet_pnzpp [options] code year day sess_len ntests
 test_geonet_pnzpp -h

=head1 Description

Script for compiling test statistics for analysis of the PostioNZ-PP 
bernese PCF script.  The script constructs a series of RINEX files extracted from
downloaded Geonet files.  It runs the PCF on each of these files and compiles 
statistics of the results into a CSV file for further analysis.

RINEX files are built for a sequence of sessions of the same length, starting
at a specified time.

=head1 Parameters

=over

=item code

The Geonet station code to use for testing.  Multiple stations can be specified
separated by '+', eg RAKW+VGMT

=item year

The year for the first test session

=item day

The day of year of the first session

=item sess_len

The length session formatted as H, HH or HH:MM, where H is the number of hours and 
MM the number of minutes (eg 2, 10, 3:30).  Multiple session lengths may be 
specified separated by '+', eg 0:30+1+2+3+5

=item ntests

The number of sessions to create

=back

=head1 Options

=over 

=item -o orbit

The orbit type to use (eg ULTRA, RAPID, FINAL).  Multiple orbit types
can be specified separated by '+'.

=item -p pcf

Bernese PCF to run.  Multiple PCF files can be specified separated by '+'.
The default is RUN_PNZ.

=item -t hh:mm

Start time of day of the first session. Default is 0:00.

=item -s csv

Base name of csv file (default is test_pnz)

=item -c camp

Campaign name to create.  The default is TEST_PNZ, and the campaign is
overwritten for each test.  If the campaign name contains # then this 
will be replaced with a sequence number so that each job is preserved.

=item -x #

Number of sessions to skip (use to repeat selected sessions)

=item -d

Directory for RINEX files, default is the current directory

=item -v

Set to verbose mode

=item -h

Print help

=back

=cut

